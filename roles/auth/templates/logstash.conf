input {
  file {
    path => "/tmp/logstash/input/*.log"
  }
}
filter {
  grok {
    match => { 
        "message" => '(?<sessionlog>%{IPORHOST:ip_address} - (?<user>([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})|(-)|([a-zA-Z0-9._%+-]+)) \[%{HTTPDATE:timestamp}\] %{HOSTPORT:header} %{WORD:verb} (?<upstream>(%{HOSTPORT})|(-)) "%{URIPATHPARAM:request}" HTTP/%{NUMBER:httpversion} %{QS:agent} %{NUMBER:response:int} (?:-|%{NUMBER:bytes:int}) %{NUMBER:duration})|(?<syslog>(?<timestamp>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}) (?<msg>.*))' 
    }
  }
  if [sessionlog] =~ /.+/ {
    mutate {
        add_field => { 
            "type" => "sessionlog" 
        }
        remove_field => ["sessionlog"]
    }
    date {
        match => ["timestamp","dd/MMM/YYYY:HH:mm:ss Z"]
        locale => en
        remove_field => ["timestamp"]
    }
    useragent {
        source => "agent"
        target => "useragent"
    }
    geoip {
        source => "ip_address"
        target => "geoip"
        database => "/usr/share/logstash/logstash-2.2.0/GeoLiteCity.dat"
    }
  } else if [syslog] =~ /.+/ {
    mutate {
        add_field => { 
            type => "syslog" 
        }
        remove_field => ["syslog"]
    }
    date {
        match => ["timestamp","YYYY/MM/dd HH:mm:ss"]
        locale => en
        remove_field => ["timestamp"]
    }
  }
}
output {
  elasticsearch {
    codec => "json"
    hosts => [{% for node in groups.nodes %}"elasticsearch{{ loop.index-1 }}:{{ elasticsearch_port_start+loop.index-1 }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    user => "{{ project_id }}"
    index => "{{ project_id }}-{{ role_id }}-access"
    template => "/tmp/logstash/config/elasticsearch_template.json"
    template_name => "{{ project_id }}-{{ role_id }}"
    template_overwrite => true
  }
}